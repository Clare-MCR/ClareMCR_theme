<?php
/*

* Generated By Orbisius Child Theme Creator - your favorite plugin for Child Theme creation :)

* https://wordpress.org/plugins/orbisius-child-theme-creator/

*

* Unlike style.css, the functions.php of a child theme does not override its counterpart from the parent.

* Instead, it is loaded in addition to the parentâ€™s functions.php. (Specifically, it is loaded right before the parent theme's functions.php).

* Source: http://codex.wordpress.org/Child_Themes#Using_functions.php

*

* Be sure not to define functions, that already exist in the parent theme!

* A common pattern is to prefix function names with the (child) theme name.

* Also if the parent theme supports pluggable functions you can use function_exists( 'put_the_function_name_here' ) checks.

*/


function my_new_contactmethods( $contactmethods ) {
    //add committee Email
    $contactmethods['committeemail'] = 'Committee Email';
$contactmethods['committeemail2'] = 'Secondary Committee Email';
    //add committee Position
    $contactmethods['committeerole'] = 'Committee Position';
    //add Current degree
    $contactmethods['currdegree'] = 'Current Degree';
   //add LinkedIn
    $contactmethods['linkedin'] = 'LinkedIn (full url)';
    return $contactmethods;
}
add_filter('user_contactmethods','my_new_contactmethods',10,1);

function get_the_author_role() {
	global $wpdb, $wp_roles, $authordata;

	if ( !isset($wp_roles) )
		$wp_roles = new WP_Roles();

		foreach($wp_roles->role_names as $role => $Role) {
			$caps = $wpdb->prefix . 'capabilities';
			if (array_key_exists($role, $authordata->$caps))
				return $Role;
		}
 }

/**
* Echo the account role of the author of the current post in the Loop.
* @see get_the_author_role()
* @return null
*/
function the_author_role() {
	        echo get_the_author_role();
}

/**
 * Include the TGM_Plugin_Activation class.
 */
require_once dirname( __FILE__ ) . '/class-tgm-plugin-activation.php';
add_action( 'tgmpa_register', 'my_theme_register_required_plugins' );
/**
 * Register the required plugins for this theme.
 *
 * In this example, we register two plugins - one included with the TGMPA library
 * and one from the .org repo.
 *
 * The variable passed to tgmpa_register_plugins() should be an array of plugin
 * arrays.
 *
 * This function is hooked into tgmpa_init, which is fired within the
 * TGM_Plugin_Activation class constructor.
 */
function my_theme_register_required_plugins() {
	/**
	 * Array of plugin arrays. Required keys are name and slug.
	 * If the source is NOT from the .org repo, then source is also required.
	 */
	$plugins = array(
		// This is an example of how to include a plugin from the WordPress Plugin Repository.
		array(
			'name'      => 'Smart Slider 2',
			'slug'      => 'smart-slider-2',
			'required'  => true,
		),
		array(
			'name'      => 'WP-PageNavi',
			'slug'      => 'wp-pagenavi',
			'required'  => true,
		),
		array(
			'name'      => 'Co-Authors Plus',
			'slug'      => 'co-authors-plus',
			'required'  => false,
		),
		array(
			'name'      => 'BAW Login/Logout menu',
			'slug'      => 'baw-login-logout-menu',
			'required'  => false,
		),
		array(
			'name'      => 'Easy Author Image',
			'slug'      => 'easy-author-image',
			'required'  => false,
		),
		array(
			'name'      => 'Social Media Widget',
			'slug'      => 'social-media-widget',
			'required'  => false,
		),
	);
	/**
	 * Array of configuration settings. Amend each line as needed.
	 * If you want the default strings to be available under your own theme domain,
	 * leave the strings uncommented.
	 * Some of the strings are added into a sprintf, so see the comments at the
	 * end of each line for what each argument will be.
	 */
	$config = array(
		'default_path' => '',                      // Default absolute path to pre-packaged plugins.
		'menu'         => 'tgmpa-install-plugins', // Menu slug.
		'has_notices'  => true,                    // Show admin notices or not.
		'dismissable'  => true,                    // If false, a user cannot dismiss the nag message.
		'dismiss_msg'  => '',                      // If 'dismissable' is false, this message will be output at top of nag.
		'is_automatic' => true,                   // Automatically activate plugins after installation or not.
		'message'      => '',                      // Message to output right before the plugins table.
		'strings'      => array(
			'page_title'                      => __( 'Install Required Plugins', 'tgmpa' ),
			'menu_title'                      => __( 'Install Plugins', 'tgmpa' ),
			'installing'                      => __( 'Installing Plugin: %s', 'tgmpa' ), // %s = plugin name.
			'oops'                            => __( 'Something went wrong with the plugin API.', 'tgmpa' ),
			'notice_can_install_required'     => _n_noop( 'This theme requires the following plugin: %1$s.', 'This theme requires the following plugins: %1$s.' ), // %1$s = plugin name(s).
			'notice_can_install_recommended'  => _n_noop( 'This theme recommends the following plugin: %1$s.', 'This theme recommends the following plugins: %1$s.' ), // %1$s = plugin name(s).
			'notice_cannot_install'           => _n_noop( 'Sorry, but you do not have the correct permissions to install the %s plugin. Contact the administrator of this site for help on getting the plugin installed.', 'Sorry, but you do not have the correct permissions to install the %s plugins. Contact the administrator of this site for help on getting the plugins installed.' ), // %1$s = plugin name(s).
			'notice_can_activate_required'    => _n_noop( 'The following required plugin is currently inactive: %1$s.', 'The following required plugins are currently inactive: %1$s.' ), // %1$s = plugin name(s).
			'notice_can_activate_recommended' => _n_noop( 'The following recommended plugin is currently inactive: %1$s.', 'The following recommended plugins are currently inactive: %1$s.' ), // %1$s = plugin name(s).
			'notice_cannot_activate'          => _n_noop( 'Sorry, but you do not have the correct permissions to activate the %s plugin. Contact the administrator of this site for help on getting the plugin activated.', 'Sorry, but you do not have the correct permissions to activate the %s plugins. Contact the administrator of this site for help on getting the plugins activated.' ), // %1$s = plugin name(s).
			'notice_ask_to_update'            => _n_noop( 'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.', 'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.' ), // %1$s = plugin name(s).
			'notice_cannot_update'            => _n_noop( 'Sorry, but you do not have the correct permissions to update the %s plugin. Contact the administrator of this site for help on getting the plugin updated.', 'Sorry, but you do not have the correct permissions to update the %s plugins. Contact the administrator of this site for help on getting the plugins updated.' ), // %1$s = plugin name(s).
			'install_link'                    => _n_noop( 'Begin installing plugin', 'Begin installing plugins' ),
			'activate_link'                   => _n_noop( 'Begin activating plugin', 'Begin activating plugins' ),
			'return'                          => __( 'Return to Required Plugins Installer', 'tgmpa' ),
			'plugin_activated'                => __( 'Plugin activated successfully.', 'tgmpa' ),
			'complete'                        => __( 'All plugins installed and activated successfully. %s', 'tgmpa' ), // %s = dashboard link.
			'nag_type'                        => 'updated' // Determines admin notice type - can only be 'updated', 'update-nag' or 'error'.
		)
	);
	tgmpa( $plugins, $config );
}

/* fix opengraph */
add_filter( 'jetpack_enable_opengraph', '__return_false', 99 );


function do_the_excerpt(){

}


/* Author List */
function contributors() {
	global $wpdb;

	$authors = $wpdb->get_results("SELECT ID, user_nicename from $wpdb->users ORDER BY display_name");
	foreach($authors as $author) {
		if ( !(get_the_author_meta('user_level', $author->ID) >= 3 )) {
			continue;
		}
		echo '<div class="img">';
		echo '<div class="desc">';
		echo "<a href=\"".get_author_posts_url($author->ID)."\">";
		the_author_meta('display_name', $author->ID);
		echo "</a></div>";
		echo "<a href=\"".get_author_posts_url($author->ID)."\">";
		echo get_avatar($author->ID);
		echo "</a>";
		echo '</div>';
	}
}

add_filter('tiny_mce_before_init','configure_tinymce');

/**
 * Customize TinyMCE's configuration
 *
 * @param   array
 * @return  array
 */
function configure_tinymce($in) {
  $in['paste_preprocess'] = "function(plugin, args){
    // Strip all HTML tags except those we have whitelisted
    var whitelist = 'p,span,b,strong,i,em,h3,h4,h5,h6,ul,li,ol,a';
    var stripped = jQuery('<div>' + args.content + '</div>');
    var els = stripped.find('*').not(whitelist);
    for (var i = els.length - 1; i >= 0; i--) {
      var e = els[i];
      jQuery(e).replaceWith(e.innerHTML);
    }
    // Strip all class and id attributes
    stripped.find('*').removeAttr('id').removeAttr('class');
    // Return the clean HTML
    args.content = stripped.html();
  }";
  return $in;
}


if (!function_exists('write_log')) {
    function write_log ( $log )  {
        if ( true === WP_DEBUG ) {
            if ( is_array( $log ) || is_object( $log ) ) {
                error_log( print_r( $log, true ) );
            } else {
                error_log( $log );
            }
        }
    }
}

// add_filter('login_redirect', 'my_login_redirect', 10, 3);
// function my_login_redirect() {
// $location = $_SERVER['HTTP_REFERER'];
// wp_safe_redirect($location);
// exit();
// }

/**
 * //--- Default MCR Bulletin featured image
 * function dfi_category ( $dfi_id, $post_id ) {
 *   // all which have 'animals' as a category
 *   if ( has_category( 'mcr-bulletin', $post_id ) ) {
 *     return 4862; // default bulletin picture
 *   }
 *   return $dfi_id; // the original featured image id
 * }
 * add_filter( 'dfi_thumbnail_id', 'dfi_category', 10, 2 );
 */
